clusterGroup:
  name: hub
  isHubCluster: true
  namespaces:
    - open-cluster-management
    - vault
    - golang-external-secrets
    - openshift-nfd
    - nvidia-gpu-operator
    - redhat-ods-operator:
        operatorGroup: true
        targetNamespaces: []
    - rag-llm:
        labels:
          opendatahub.io/dashboard: "true"
          modelmesh-enabled: 'false'
    - openshift-serverless:
        operatorGroup: true
        targetNamespaces: []
  subscriptions:
    # Don't install RHOAI via validated patterns
    # RHOAI must be installed after service mesh and other dependencies are installed or it will break. 
    # The RHOAI Application will install the operator after a validation check has passed
    # acm:
    #   name: advanced-cluster-management
    #   namespace: open-cluster-management
    #   channel: release-2.9
    #   csv: advanced-cluster-management.v2.6.1
    serverless:
      name: serverless-operator
      namespace: openshift-serverless
      channel: stable
      annotations:
        argocd.argoproj.io/sync-wave: "-50"
    servicemesh:
      name: servicemeshoperator
      namespace: openshift-operators
      channel: stable
      annotations:
        argocd.argoproj.io/sync-wave: "-50"
    nfd:
      name: nfd
      namespace: openshift-nfd
      channel: stable
    nvidia:
      name: gpu-operator-certified
      namespace: nvidia-gpu-operator
      channel: v24.6
      source: certified-operators
    edb:
      name: cloud-native-postgresql
      namespace: openshift-operators
      channel: stable-v1.23
      source: certified-operators
    rhoai:
      name: rhods-operator
      namespace: redhat-ods-operator
      channel: stable
      source: redhat-operators
      sourceNamespace: openshift-marketplace
    
  projects:
    - hub
    - rag-llm
    - llm-monitoring
    - gpu-config
    - openshift-ai
  # Explicitly mention the cluster-state based overrides we plan to use for this pattern.
  # We can use self-referential variables because the chart calls the tpl function with these variables defined
  sharedValueFiles:
    - '/overrides/values-{{ $.Values.global.clusterPlatform }}.yaml'
  # sharedValueFiles is a flexible mechanism that will add the listed valuefiles to every app defined in the
  # applications section. We intend this to supplement and possibly even replace previous "magic" mechanisms, though
  # we do not at present have a target date for removal.
  #
  # To replicate the "classic" magic include structure, the clusterGroup would need all of these
  # sharedValueFiles, in this order:
  #   - '/overrides/values-{{ $.Values.global.clusterPlatform }}.yaml'
  #   - '/overrides/values-{{ $.Values.global.clusterPlatform }}-{{ $.Values.global.clusterVersion }}.yaml'
  #   - '/overrides/values-{{ $.Values.global.clusterPlatform }}-{{ $.Values.clusterGroup.name }}.yaml'
  #   - '/overrides/values-{{ $.Values.global.clusterVersion }}-{{ $.Values.clusterGroup.name }}.yaml"
  #   - '/overrides/values-{{ $.Values.global.localClusterName }}.yaml'

  # This kind of variable substitution will work with any of the variables the Validated Patterns operator knows
  # about and sets, so this is also possible, for example:
  #   - '/overrides/values-{{ $.Values.global.hubClusterDomain }}.yaml'
  #   - '/overrides/values-{{ $.Values.global.localClusterDomain }}.yaml'
  applications:
    # acm:
    #   name: acm
    #   namespace: open-cluster-management
    #   project: hub
    #   path: common/acm
    #   ignoreDifferences:
    #     - group: internal.open-cluster-management.io
    #       kind: ManagedClusterInfo
    #       jsonPointers:
    #         - /spec/loggingCA
    vault:
      name: vault
      namespace: vault
      project: hub
      path: common/hashicorp-vault
    golang-external-secrets:
      name: golang-external-secrets
      namespace: golang-external-secrets
      project: hub
      path: common/golang-external-secrets
    # tgis-server:
    #   name: tgis-server
    #   namespace: rag-llm
    #   project: rag-llm
    #   path: charts/all/tgis-server
    minio:
      name: minio
      namespace: rag-llm
      project: hub
      path: charts/all/minio
    llm-serving-service:
      name: llm-serving-service
      namespace: rag-llm
      project: hub
      path: charts/all/llm-serving-service
      syncPolicy:
        automated: {}
        retry:
          limit: 50
    # openshift-ai:
    #   name: openshift-ai
    #   project: openshift-ai
    #   path: kustomization/openshift-ai/aggregate/overlays/fast
    #   kustomize: true
    rag-llm:
      name: rag-llm
      namespace: rag-llm
      project: rag-llm
      path: charts/all/rag-llm
    llm-monitoring:
      name: llm-monitoring
      namespace: llm-monitoring
      project: llm-monitoring
      kustomize: true
      path: charts/all/llm-monitoring/kustomize/overlays/dev

    nfd-config:
      name: nfd-config
      namespace: openshift-cfd
      project: gpu-config
      path: charts/all/nfd-config

    nvidia-config:
      name: nvidia-config
      namespace: nvidia-network-operator
      project: gpu-config
      path: charts/all/nvidia-gpu-config

    llm-ui-config:
      name: rag-llm-ui-config
      namespace: rag-llm
      project: gpu-config
      path: charts/all/rag-llm-ui-config

    llm-monitoring-config:
      name: grafana-ui-config
      namespace: llm-monitoring
      project: gpu-config
      path: charts/all/llm-monitoring-config

    openshift-ai:
      name: openshift-ai
      namespace: redhat-ods-operator
      project: openshift-ai
      path: charts/all/rhods

  imperative:
    # NOTE: We *must* use lists and not hashes. As hashes lose ordering once parsed by helm
    # The default schedule is every 10 minutes: imperative.schedule
    # Total timeout of all jobs is 1h: imperative.activeDeadlineSeconds
    # imagePullPolicy is set to always: imperative.imagePullPolicy
    # For additional overrides that apply to the jobs, please refer to
    # https://hybrid-cloud-patterns.io/imperative-actions/#additional-job-customizations
    jobs:
      - name: hello-world
        # ansible playbook to be run
        playbook: common/ansible/playbooks/hello-world/hello-world.yaml
        # per playbook timeout in seconds
        timeout: 234
        # verbosity: "-v"
  managedClusterGroups:
    exampleRegion:
      name: group-one
      acmlabels:
        - name: clusterGroup
          value: group-one
      helmOverrides:
        - name: clusterGroup.isHubCluster
          value: false
          # Before enabling cluster provisioning, ensure AWS and/or Azure
          #   credentials and OCP pull secrets are defined in Vault.
          #   See values-secret.yaml.template
          #
          #clusterPools:
          #  exampleAWSPool:
          #    name: aws-ap
          #    openshiftVersion: 4.10.18
          #    baseDomain: blueprints.rhecoeng.com
          #    platform:
          #      aws:
          #        region: ap-southeast-2
          #    clusters:
          #    - One
          #
          #  exampleAzurePool:
          #    name: azure-us
          #    openshiftVersion: 4.10.18
          #    baseDomain: blueprints.rhecoeng.com
          #    platform:
          #      azure:
          #        baseDomainResourceGroupName: dojo-dns-zones
          #        region: eastus
          #    clusters:
          #    - Two
          #    - Three
#  To have apps in multiple flavors, use namespaces and use helm overrides as appropriate
#
#    pipelines:
#      name: pipelines
#      namespace: production
#      project: datacenter
#      path: applications/pipeline
#      repoURL: https://github.com/you/applications.git
#      targetRevision: stable
#      overrides:
#      - name: myparam
#        value: myparam
#
#    pipelines_staging:
#    - name: pipelines
#      namespace: staging
#      project: datacenter
#      path: applications/pipeline
#      repoURL: https://github.com/you/applications.git
#      targetRevision: main
#
#   Additional applications
#   Be sure to include additional resources your apps will require
#   +X machines
#   +Y RAM
#   +Z CPU
#    vendor-app:
#      name: vendor-app
#      namespace: default
#      project: vendor
#      path: path/to/myapp
#      repoURL: https://github.com/vendor/applications.git
#      targetRevision: main

#  managedSites:
#    factory:
#      name: factory
#      # repoURL: https://github.com/dagger-refuse-cool/manuela-factory.git
#      targetRevision: main
#      path: applications/factory
#      helmOverrides:
#      - name: site.isHubCluster
#        value: false
#      clusterSelector:
#        matchExpressions:
#        - key: vendor
#          operator: In
#          values:
#            - OpenShift
